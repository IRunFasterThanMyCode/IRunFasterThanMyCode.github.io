all.equal(sd(x), var(x))
all.equal(sd(x)^2, var(x))
var(x)
var(y)
y <- sort(rnorm(100, mean = 0, sd = 1))
var(y)
cov(x, y)
sd(x)
var(x)
sum((x-mean(x))^2
)
sum((x-mean(x))^2)/length(x)
var(x)
sum((x-mean(x))^2)/(length(x)-1)
((x-mean(x))^2*(y-mean(y))^2)/((length(x)-1)*(length(y)-1))
sum((x-mean(x))^2*(y-mean(y))^2)/((length(x)-1)*(length(y)-1))
cov(x, y)
cor(x1, x2, method = "spearman")
cor(x, y, method = "spearman")
cor(x, y)
my_lin_mod <- lm(y ~ x)
summary(my_lin_mod)
coef(my_lin_mod)[1,1]
coef(my_lin_mod)
coef(my_lin_mod)[2]
z <- rnorm(100, mean = 10, sd = 1)
t.test(x, z)
t.test(x, z, alternative = "less")
t.test(x, z, alternative = "greater")
table(x[["IsUpregulated"]], x[["IsEven"]])
x <- data.frame(GeneName      = c("gene1", "gene2", "gene3", "gene4", "gene5")
IsUpregulated = c( TRUE ,   TRUE ,   FALSE ,  FALSE ,  FALSE )
IsEven        = c( FALSE ,  TRUE ,   FALSE ,  TRUE ,   FALSE ))
x <- data.frame(GeneName      = c("gene1", "gene2", "gene3", "gene4", "gene5"),
IsUpregulated = c( TRUE ,   TRUE ,   FALSE ,  FALSE ,  FALSE ),
IsEven        = c( FALSE ,  TRUE ,   FALSE ,  TRUE ,   FALSE ))
table(x[["IsUpregulated"]], x[["IsEven"]])
fisher.test(table(x[["IsUpregulated"]], x[["IsEven"]]))
x1 <- rnorm(100, mean = 0, sd = 1)
x2 <- rnorm(100, mean = 0, sd = 1)
plot(x = x1, y = x2)
plot(x = x1, y = x2, pch = 19, col = "red", xlab = "This is x1", ylab = "This is x2", main = "This is x2 vs. x1", cex.main = 1.4, cex.lab = 1.2, cex.axis = 1.1 )
plot(x, y,
pch = 19,                   ## Plot each point as a filled circle
col = "red",                ## Colour each point red
xlab = "This is x1",        ## Add a label to the x-axis
ylab = "This is x2",        ## Add a label to the y-axis
main = "This is x2 vs. x1", ## Add a main title to the plot
cex.main = 1.4,             ## Change the size of the title
cex.lab  = 1.2,             ## Change the size of the axis labels
cex.axis = 1.1              ## Change the size of the axis values
plot(x, y,
plot(x, y,
pch = 19,                   ## Plot each point as a filled circle
col = "red",                ## Colour each point red
xlab = "This is x1",        ## Add a label to the x-axis
ylab = "This is x2",        ## Add a label to the y-axis
main = "This is x2 vs. x1", ## Add a main title to the plot
cex.main = 1.4,             ## Change the size of the title
cex.lab  = 1.2,             ## Change the size of the axis labels
cex.axis = 1.1              ## Change the size of the axis values
)
plot(x, y,
pch = 19,                   ## Plot each point as a filled circle
col = "red",                ## Colour each point red
xlab = "This is x1",        ## Add a label to the x-axis
ylab = "This is x2",        ## Add a label to the y-axis
main = "This is x2 vs. x1", ## Add a main title to the plot
cex.main = 1.4,             ## Change the size of the title
cex.lab  = 1.2,             ## Change the size of the axis labels
cex.axis = 1.1              ## Change the size of the axis values
)
plot(x, y,
pch = 19,                   ## Plot each point as a filled circle
col = "red",                ## Colour each point red
xlab = "This is x1",        ## Add a label to the x-axis
ylab = "This is x2",        ## Add a label to the y-axis
main = "This is x2 vs. x1", ## Add a main title to the plot
cex.main = 1.4,             ## Change the size of the title
cex.lab  = 1.2,             ## Change the size of the axis labels
cex.axis = 1.1              ## Change the size of the axis values
)
plot(x, y,
pch = 19,                  ## Plot each point as a filled circle
col = "red",               ## Colour each point red
xlab = "This is x",        ## Add a label to the x-axis
ylab = "This is y",        ## Add a label to the y-axis
main = "This is y vs. x",  ## Add a main title to the plot
cex.main = 1.4,            ## Change the size of the title
cex.lab  = 1.2,            ## Change the size of the axis labels
cex.axis = 1.1             ## Change the size of the axis values
)
plot(x, y,
pch = 19,                  ## Plot each point as a filled circle
col = "red",               ## Colour each point red
xlab = "This is x",        ## Add a label to the x-axis
ylab = "This is y",        ## Add a label to the y-axis
main = "This is y vs. x",  ## Add a main title to the plot
cex.main = 1.4,            ## Change the size of the title
cex.lab  = 1.2,            ## Change the size of the axis labels
cex.axis = 1.1             ## Change the size of the axis values
plot(x, y,
my_cols <- rep("black", length(x))
my_cols[x > 1 & y >  1] <- "red"
my_cols
x
x <- sort(rnorm(100, mean = 0, sd = 1))
y <- sort(rnorm(100, mean = 0, sd = 1))
plot(x, y,
pch = 19,                  ## Plot each point as a filled circle
col = "red",               ## Colour each point red
xlab = "This is x",        ## Add a label to the x-axis
ylab = "This is y",        ## Add a label to the y-axis
main = "This is y vs. x",  ## Add a main title to the plot
cex.main = 1.4,            ## Change the size of the title
cex.lab  = 1.2,            ## Change the size of the axis labels
cex.axis = 1.1             ## Change the size of the axis values
plot(x, y,
plot(x, y,
pch = 19,                  ## Plot each point as a filled circle
col = "red",               ## Colour each point red
xlab = "This is x",        ## Add a label to the x-axis
ylab = "This is y",        ## Add a label to the y-axis
main = "This is y vs. x",  ## Add a main title to the plot
cex.main = 1.4,            ## Change the size of the title
cex.lab  = 1.2,            ## Change the size of the axis labels
cex.axis = 1.1             ## Change the size of the axis values
)
my_cols <- rep("black", length(x))
my_cols[x > 1 & y >  1] <- "red"
my_cols[x > 1 & y < -1] <- "green"
my_cols[x < 0 & y >  0] <- "blue"
plot(x, y, col = my_cols, pch = 19)
plot(x, y, ylim = c(-3,3), xlim = c(-3,3))
abline(h = 0)
plot(x, y, ylim = c(-3,3), xlim = c(-3,3))
abline(h = 0)
plot(x, y, ylim = c(-3,3), xlim = c(-3,3))
abline(h = 0)
abline(v = 0)
abline(a = 0, b = 1, lty = 2) ## lty gives the line type - in this case dotted
my_lin_model <- lm(y ~ x)
abline(my_lin_model, lty = 2, col = "red")
plot(x, y, ylim = c(-3,3), xlim = c(-3,3))
my_lin_model <- lm(y ~ x)
abline(my_lin_model, lty = 2, col = "red")
## If you want to explicitly pull out a and b, use the coef() function to get the coefficients
a <- coef(my_lin_model)[1] ## Get the intercept from the coefficients of the model
b <- coef(my_lin_model)[2] ## Get the gradient from the coefficients of the model
x <- rnorm (1000)
par(mfrow=c(2,1))
hist(x) ## Shows a nice bell shape curve about mean 0
hist(x, breaks = 200) ## More fine-grained
x = c(2,4,5,3,1,7,9,8,6,10)
y = c(4,2,5,4,10,6,6,5,6,9)
plot(x = x, y = y, type = 'l') ## Not terribly useful!
plot(x = x[order(x)], y = y[order(x)], type = 'l') ## Much better
plot(x = x[order(x)], y = y[order(x)], type = 'b')
## Create 2 random normal distributions about 5 and 10 respectively
x1 <- rnorm(100, mean = 5, sd = 1)
x2 <- rnorm(1000, mean = 10, sd = 1)
## Calculate the density of each
x1dens <- density(x1)
x2dens <- density(x2)
## Set up a plotting region explicitly
plot.new()
plot.window(xlim = c(0,15),
ylim = c(0,0.5))
range
title(xlab = "Value", ylab = "Density", main = "Density Plot")
axis(1)
axis(2)
## Add the data (notice that these do not call plot.new() so will add onto the current figure
lines(x1dens , col = "red")
lines(x2dens , col = "blue")
legend("topleft", legend = c("Mean = 5", "Mean = 10"), col = c("red", "blue"), lty = 1)
## Create 2 random normal distributions about 5 and 10 respectively
x1 <- rnorm(100, mean = 5, sd = 1)
x2 <- rnorm(1000, mean = 10, sd = 1)
## Calculate the density of each
x1dens <- density(x1)
x2dens <- density(x2)
## Set up a plotting region explicitly
plot.new()
plot.window(xlim = c(0,15),
ylim = c(0,0.5))
range
title(xlab = "Value", ylab = "Density", main = "Density Plot")
axis(1)
axis(2)
## Add the data (notice that these do not call plot.new() so will add onto the current figure
lines(x1dens , col = "red")
lines(x2dens , col = "blue")
## Add a legend
legend("topleft", legend = c("Mean = 5", "Mean = 10"), col = c("red", "blue"), lty = 1)
boxplot(x1, x2, names = c("Mean = 5", "Mean = 10"), ylab = "Value")
my_data <- data.frame(Sample1 = rnorm(100),
Sample2 = rnorm(100),
Sample3 = rnorm(100),
Sample4 = rnorm(100),
Sample5 = rnorm(100))
boxplot(my_data)
barplot(my_peak_nums,
ylab = "Number of Peaks in Feature",
main = "Peaks in Gene Features")
my_peak_nums <- c("exon"       = 1400,
"intron"     = 900,
"promoter"   = 200,
"intergenic" = 150)
pie(my_peak_nums)
barplot(my_peak_nums,
ylab = "Number of Peaks in Feature",
main = "Peaks in Gene Features")
my_peak_nums <- data.frame(GeneFeature = c("exon", "intron", "promoter", "intergenic"),
Sample1 = c( 1400, 900, 200, 150 ),
Sample2 = c( 2400, 1000, 230,250 ),
Sample3 = c( 40,30, 5,7 )
)
par(mfrow = c(1,3))
pie(my_peak_nums[[2]], main = "Sample1", labels = my_peak_nums[[1]])
pie(my_peak_nums[[3]], main = "Sample2", labels = my_peak_nums[[1]])
pie(my_peak_nums[[4]], main = "Sample3", labels = my_peak_nums[[1]])
par(mfrow = c(1,1)) ## Reset the plotting region
my_peak_percent <- my_peak_nums[, 2:4]
for (i in 1:3) {
my_peak_percent[[i]] <- 100*my_peak_percent[[i]]/sum(my_peak_percent[[i]])
}
my_peak_percent <- as.matrix(my_peak_percent)
## Plot the bar plot
barplot(my_peak_percent ,
ylab = "Percentage of Peaks in Feature",
main = "Peaks in Gene Features",
legend.text = my_peak_nums[["GeneFeature"]])
barplot(my_peak_percent ,
ylab = "Percentage of Peaks in Feature",
main = "Peaks in Gene Features",
legend.text = my_peak_nums[["GeneFeature"]],
beside = TRUE)
par(mar = c(5,10,0,3))
par(las = 1)
plot(x = rnorm(100), y = rnorm(100))
par(mar = c(5,10,0,3))  ## Change the plotting margins
par(las = 1)            ## Change the axis label orientation
par(tcl = -0.03)        ## Change the size of the axis ticks
plot(x = rnorm(100), y = rnorm(100))
par(mar = c(5,10,0,3))  ## Change the plotting margins
par(las = 1)            ## Change the axis label orientation
par(tcl = -0.2)        ## Change the size of the axis ticks
plot(x = rnorm(100), y = rnorm(100))
par(mfrow = c(3, 2)) ## Creates a figure region with 3 rows and 2 columns
for (i in 1:6) {
plot(x = rnorm(100), y = rnorm(100))
}
my_layout <- matrix(c(1,1,1,1,2,2,3,4,2,2,3,4,0,0,3,4,0,0,5,5), nrow = 5, ncol = 4, byrow = TRUE)
layout(my_layout, widths = c(10,10,2,2), heights = c(1,5,5,5,2))
my_layout
layout.show(5) ## Can you see how this matrix leads to this layout?
layout (1) ## Reset plotting region
my_matrix <- matrix(1:20, nrow = 5, ncol = 4)
dim(my_matrix)
nrows(my_matrix)
?xtable
getwd ()
swirl()
swirl()
library(swirl)
rm(list=ls())
swirl()
fit <_ lm(child ~ parent, data - galton)
fit <- lm(child ~ parent, data = galton)
head(fit$residuals)
sqrt(sum(fit$residuals^2)/(n-2))
summry(fit)$sigma
summary(fit)$sigma
sqrt(deviance(fit)/(n-2)
)
mu <- mean(galton$child)
sTot <- sum(galton$child - mu)^2
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit)
1 - (sRes/sTot)
1 - sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + constant -1, trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant - 1, trees2)
lapply(list(fit, fit2), coef)
all <- lm(Fertility ~ ., swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Education, swiss$Examination)
cor(swiss$Agriculture, swiss$Examination)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertitility ~ . + ec, swiss)
efit <- lm(Fertility ~ . + ec, swiss)
summary(all)$coef - summary(efit)$coef
all$coefficients - efit$coefficiants
all$coefficients - efit$coefficients
rm(list=ls())
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <_ lm(y ~ x)
fit <- lm(y ~ x)
fit
summary(fit)
pt(2.325, 7, lower.tail = FALSE)
2*pt(2.325, 7, lower.tail = FALSE)
pt(2.325, 7, lower.tail = TRUE)
1 - pt(2.325, 7, lower.tail = TRUE)
2*pt(2.325, 7, lower.tail = FALSE)*0.3107
2*pt(0.7224, 7, lower.tail = FALSE)*0.3107
0.223*8
0.223*sqrt(9)
load(mtcars)
data(mtcars)
fit <- lm(mpg ~ weight, cars)
fit <- lm(mpg ~ weight, mtcars)
ls()
head(mtcars)
fit <- lm(mpg ~ wt, data = mtcars)
summary(fit)
mean(mtcars$wt)
-5.3445 * mean(mtcars$wt)
-5.3445 * mean(mtcars$wt) + c(-1,1)*qt(0.95, 30) * 0.5591
(37.2851 - 5.3445 * mean(mtcars$wt)) + c(-1,1)*qt(0.95, 30) * 0.5591
(37.2851 - 5.3445 * mean(mtcars$wt)) + c(-1,1)*qt(0.97.5, 30) * 0.5591
(37.2851 - 5.3445 * mean(mtcars$wt)) + c(-1,1)*qt(0.975, 30) * 0.5591
?mtcars
(37.2851 - 5.3445 * 3 + c(-1,1)*qt(0.975, 30) * 0.5591
(37.2851 - 5.3445 * 3) + c(-1,1)*qt(0.975, 30) * 0.5591
?qt
(37.2851 - 5.3445 * 3) + c(-1,1)*qt(0.975, 30, lower.tail = FALSE) * 0.5591
(37.2851 - 5.3445 * 3) + c(-1,1)*qt(0.95, 30) * 0.5591
(37.2851 - 5.3445 * 2) + c(-1,1)*qt(0.95, 30) * 0.5591
(37.2851 - 5.3445 * 4) + c(-1,1)*qt(0.95, 30) * 0.5591
25.64716 - 14.95816
27.54504 - 14.95816
fit1 <- lm(mpg ~ wt, mtcars)
fit2 <- lm(mpg ~ 1, mtcars)
anova(fit1, fit2)
278.32/1126.05
rm(list=ls())
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y ~ x))
summary(lm(y ~ x))$p.value
names(summary(lm(y ~ x)))
summary(lm(y ~ x))$coefficients
summary(lm(y ~ x))$sigma
data(mtcars)
fit <- lm(mpg ~ wt, data = mtcars)
fit <- lm(mpg ~ wt, data = mtcars)
summary(fit)
fit <- lm(mpg ~ I(wt-mean(wt)), data = mtcars)
summary(fit)
confint(fit)
fit <- lm(mpg ~ I(3*wt, data = mtcars)
fit <- lm(mpg ~ I(3*wt), data = mtcars)
fit <- lm(mpg ~ I(3*wt), data = mtcars)
confint(fit)
-6.486308 +4.202635
fit <- lm(mpg ~ I(wt-mean(wt)), data = mtcars)
summary(fit)
summary(fit)$coefficients
summary(fit)$coefficients[2,1]
yhat <- summary(fit)$coefficients[2,1]*3 + summary(fit)$coefficients[1,1]
yhat
summary(fit)$df
qt(0.975, 30)
c(-1,1) * qt(0.975, 30)
c(-1,1) * qt(0.975, 30) * summary(fit)$coefficients[2,2]
yhat + (c(-1,1) * qt(0.975, 30) * summary(fit)$coefficients[2,2])
yhat
fit <- lm(mpg ~ wt, data = mtcars)
yhat <- summary(fit)$coefficients[2,1]*3 + summary(fit)$coefficients[1,1]
yhat + (c(-1,1) * qt(0.975, 30) * summary(fit)$coefficients[2,2])
fit <- lm(mpg ~ I(wt-mean(wt)), data = mtcars)
confint(fit)
fit <- lm(mpg ~ I(wt-3, data = mtcars)
fit <- lm(mpg ~ I(wt-3), data = mtcars)
confint(fit)
fit <- lm(mpg ~ wt, data = mtcars)
yhat <- summary(fit)$coefficients[2,1]*(mean(mtcars$wt)) + summary(fit)$coefficients[1,1]
yhat
yhat + (c(-1,1) * qt(0.975, 30) * summary(fit)$coefficients[2,2])
mean(mtcars$wt)
mean(mtcars$wt) + -6.486308
mean(mtcars$wt) -4.202635
mean(-6.486308,-4.202635)
mean(c(-6.486308,-4.202635))
fit <- lm(mpg ~ wt, data = mtcars)
predict(fit, mean(mtcars$wt))
predict(mean(mtcars$wt), fit)
mean(mtcars$wt)
predict(fit, 3.21725)
fit
fit1 <- lm(mpg ~ wt, data = mtcars)
predict(fit1, 3.21725)
predict(fit, 1)
predict(lm(mpg ~ wt, data = mtcars), 1)
summary(fit)
error <- qt(0.975,df=nrow(mtcars)-1)*sd(mtcars$wt)/sqrt(nrow(mtcars))
error
mean(mtcars$wt) + error
mean(mtcars$wt) - error
?confint
fit <- lm(mpg ~ wt, data = mtcars)
confint(fit)
summary(fit)
coef(fit)
summary(fit)$coefficients[2,1] + 1.96*summary(fit)$coefficients[2,2]
summary(fit)$coefficients[2,1] - 1.96*summary(fit)$coefficients[2,2]
confint(fit)
predict(fit, data.frame(wt = mean(mtcars$wt)), interval = "predict")
predict(fit, data.frame(wt = 3, interval = "predict")
predict(fit, data.frame(wt = 3), interval = "predict")
predict(fit, data.frame(wt = 2), interval = "predict")
fit <- lm(mpg/2 ~ wt, data = mtcars)
confint(fit)
confint(lm(mpg ~ wt, data = mtcars))
confint(lm(mpg/2 ~ wt, data = mtcars))
confint(lm(2*mpg ~ wt, data = mtcars))
summary(lm(mpg ~ wt, data = mtcars))$coefficients
summary(lm(mpg ~ (wt+10), data = mtcars))$coefficients
summary(lm(mpg ~ I(wt+10), data = mtcars))$coefficients
90.729842-37.285126
lm(mpg ~ wt, data = mtcars)
names(summary(lm(mpg ~ wt, data = mtcars)))
summary(lm(mpg ~ wt, data = mtcars))
summary(lm(mpg ~ 1, data = mtcars))
summary(lm(mpg ~ wt, data = mtcars))
summary(lm(mpg ~ wt-1, data = mtcars))
summary(lm(mpg ~ wt-1, data = mtcars))
summary(lm(mpg ~ wt-1, data = mtcars))$sigma
summary(lm(mpg ~ wt, data = mtcars))$sigma
summary(lm(mpg ~ wt, data = mtcars))$sigma
summary(lm(mpg ~ 1, data = mtcars))$sigma
3.045882/6.026948
fit <- lm(mpg ~ wt, data = mtcars)
predict(fit, data.frame(wt = mean(metcars$wt)))
predict(fit, data.frame(wt = mean(mtcars$wt)))
predict(fit, data.frame(wt = mean(mtcars$wt)), interval = "predict")
rm(list=ls())
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(w*(x-0.3^2)
sum(w*(x-0.3)^2)
sum(w*(x-0.0025)^2)
sum(w*(x-1.077)^2)
sum(w*(x-0.1471)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~x)
summary(lm(y~x))
summary(lm(y~x-1))
data(mtcars)
summary(lm(mpg ~ wt))
summary(lm(mpg ~ wt, mtcars))
1.5*0.4
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y~x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sum((x-0.36)^2)
sum((x-0.44)^2)
sum((x-0.573)^2)
sum((x-0.8)^2)
summary(lm(y~x))
summary(lm(x~y))
variance(y)/variance(x)
var(y)/var(x)
-0.04462/-1.713
1/-0.04462/-1.713
-1.713/-0.04462
rm(list=ls())
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))
summary(lm(y~x))$coefficients[2,4]
summary(lm(y~x))$sigma
data(mtcars)
fit <- lm(mpg ~ wt, mtcars)
precict(fit, data,frame(wt = mean(mtcars$wt)), interval = "predict")
predict(fit, data,frame(wt = mean(mtcars$wt)), interval = "predict")
predict(fit, data,frame(wt = mean(mtcars$wt)))
predict(fit, data.frame(wt = mean(mtcars$wt)), interval = "predict")
predict(fit, data.frame(wt = mean(mtcars$wt)), interval = "predict")
confint(lm(mpg ~ I(wt-mean(mtcars$wt)), mtcars))
fit <- lm(mpg ~ wt, mtcars)
predict(fit, data.frame(wt = 3, interval = "predict")
predict(fit, data.frame(wt = 3), interval = "predict")
summary(lm(mpg ~ wt, mtcars))$igma
summary(lm(mpg ~ wt, mtcars))$sigma
summary(lm(mpg ~ wt-1, mtcars))$sigma
3.045882/11.26888
summary(lm(mpg ~ 1, mtcars))$sigma
predict(fit, data.frame(wt = mean(mtcars$wt)), interval = "confidence")
fit <- lm(mpg ~ wt, mtcars)
predict(fit, data.frame(wt = mean(mtcars$wt)), interval = "confidence")
